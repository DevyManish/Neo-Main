generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  meetings      Meeting[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model Project {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[]
}

model Message {
  id        String      @id @default(uuid())
  content   String
  role      MessageRole
  type      MessageType
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  projectId String
  fragement Fragement?
  project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Fragement {
  id         String   @id @default(uuid())
  messageId  String   @unique
  sandboxUrl String
  title      String
  files      Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  message    Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

model Meeting {
  id             String         @id @default(uuid())
  meetId         String         @unique
  botId          String
  userId         String
  status         String?
  constructedUrl String?
  startTime      DateTime?
  endTime        DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  summary        String?
  name           String
  conversations  Conversation[]
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Conversation {
  id                String    @id @default(uuid())
  meetingId         String
  start             Float
  end               Float
  text              String
  language          String
  speaker           String?
  absoluteStartTime DateTime?
  absoluteEndTime   DateTime?
  meeting           Meeting   @relation(fields: [meetingId], references: [id], onDelete: Cascade)
}

enum MessageRole {
  USER
  ASSISTANT
}

enum MessageType {
  RESULT
  ERROR
}
